// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/tracking/data/models/battery_status_model.dart';
import 'features/tracking/data/models/device_info_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6575810847932051434),
      name: 'BatteryStatusModel',
      lastPropertyId: const obx_int.IdUid(5, 6456125447013599938),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3184119626271728262),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7320898788225371411),
            name: 'level',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 622180312178789599),
            name: 'charging',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5580190595671806136),
            name: 'status',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6456125447013599938),
            name: 'deviceInfoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 444710295680164493),
            relationTarget: 'DeviceInfoModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8282122270348835851),
      name: 'DeviceInfoModel',
      lastPropertyId: const obx_int.IdUid(16, 7962844570661211915),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4244403632384284486),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 118283774850538939),
            name: 'deviceModel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 19782384035651792),
            name: 'osVersion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4965227215453164512),
            name: 'screenResolution',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2086815102931070162),
            name: 'deviceUniqueID',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6811114128518432914),
            name: 'batteryStatusId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 3306080761711921613),
            relationTarget: 'BatteryStatusModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4756990732018712316),
            name: 'networkInformation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 855914071425509221),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 499799690017468040),
            name: 'longitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1412365797318320226),
            name: 'accuracy',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2859797024750703747),
            name: 'altitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7656153299138016908),
            name: 'heading',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 1700959152187223790),
            name: 'speed',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6828139911181447107),
            name: 'speedAccuracy',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7530108220449479169),
            name: 'timestamp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 7962844570661211915),
            name: 'nearbyBluetoothDevices',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 8282122270348835851),
      lastIndexId: const obx_int.IdUid(2, 3306080761711921613),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    BatteryStatusModel: obx_int.EntityDefinition<BatteryStatusModel>(
        model: _entities[0],
        toOneRelations: (BatteryStatusModel object) => [object.deviceInfo],
        toManyRelations: (BatteryStatusModel object) => {},
        getId: (BatteryStatusModel object) => object.id,
        setId: (BatteryStatusModel object, int id) {
          object.id = id;
        },
        objectToFB: (BatteryStatusModel object, fb.Builder fbb) {
          final levelOffset = fbb.writeString(object.level);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, levelOffset);
          fbb.addBool(2, object.charging);
          fbb.addOffset(3, statusOffset);
          fbb.addInt64(4, object.deviceInfo.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final levelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final chargingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final statusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = BatteryStatusModel(
              level: levelParam, charging: chargingParam, status: statusParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.deviceInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.deviceInfo.attach(store);
          return object;
        }),
    DeviceInfoModel: obx_int.EntityDefinition<DeviceInfoModel>(
        model: _entities[1],
        toOneRelations: (DeviceInfoModel object) => [object.batteryStatus],
        toManyRelations: (DeviceInfoModel object) => {},
        getId: (DeviceInfoModel object) => object.id,
        setId: (DeviceInfoModel object, int id) {
          object.id = id;
        },
        objectToFB: (DeviceInfoModel object, fb.Builder fbb) {
          final deviceModelOffset = fbb.writeString(object.deviceModel);
          final osVersionOffset = fbb.writeString(object.osVersion);
          final screenResolutionOffset =
              fbb.writeString(object.screenResolution);
          final deviceUniqueIDOffset = fbb.writeString(object.deviceUniqueID);
          final networkInformationOffset =
              fbb.writeString(object.networkInformation);
          final nearbyBluetoothDevicesOffset = fbb.writeList(object
              .nearbyBluetoothDevices
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, deviceModelOffset);
          fbb.addOffset(2, osVersionOffset);
          fbb.addOffset(3, screenResolutionOffset);
          fbb.addOffset(4, deviceUniqueIDOffset);
          fbb.addInt64(5, object.batteryStatus.targetId);
          fbb.addOffset(6, networkInformationOffset);
          fbb.addFloat64(7, object.latitude);
          fbb.addFloat64(8, object.longitude);
          fbb.addFloat64(9, object.accuracy);
          fbb.addFloat64(10, object.altitude);
          fbb.addFloat64(11, object.heading);
          fbb.addFloat64(12, object.speed);
          fbb.addFloat64(13, object.speedAccuracy);
          fbb.addInt64(14, object.timestamp.millisecondsSinceEpoch);
          fbb.addOffset(15, nearbyBluetoothDevicesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final deviceModelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final osVersionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final screenResolutionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final deviceUniqueIDParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final networkInformationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final latitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final longitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final accuracyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final altitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final headingParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final speedParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final speedAccuracyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final timestampParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0));
          final nearbyBluetoothDevicesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 34, []);
          final object = DeviceInfoModel(
              deviceModel: deviceModelParam,
              osVersion: osVersionParam,
              screenResolution: screenResolutionParam,
              deviceUniqueID: deviceUniqueIDParam,
              networkInformation: networkInformationParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              accuracy: accuracyParam,
              altitude: altitudeParam,
              heading: headingParam,
              speed: speedParam,
              speedAccuracy: speedAccuracyParam,
              timestamp: timestampParam,
              nearbyBluetoothDevices: nearbyBluetoothDevicesParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.batteryStatus.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.batteryStatus.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [BatteryStatusModel] entity fields to define ObjectBox queries.
class BatteryStatusModel_ {
  /// See [BatteryStatusModel.id].
  static final id =
      obx.QueryIntegerProperty<BatteryStatusModel>(_entities[0].properties[0]);

  /// See [BatteryStatusModel.level].
  static final level =
      obx.QueryStringProperty<BatteryStatusModel>(_entities[0].properties[1]);

  /// See [BatteryStatusModel.charging].
  static final charging =
      obx.QueryBooleanProperty<BatteryStatusModel>(_entities[0].properties[2]);

  /// See [BatteryStatusModel.status].
  static final status =
      obx.QueryStringProperty<BatteryStatusModel>(_entities[0].properties[3]);

  /// See [BatteryStatusModel.deviceInfo].
  static final deviceInfo =
      obx.QueryRelationToOne<BatteryStatusModel, DeviceInfoModel>(
          _entities[0].properties[4]);
}

/// [DeviceInfoModel] entity fields to define ObjectBox queries.
class DeviceInfoModel_ {
  /// See [DeviceInfoModel.id].
  static final id =
      obx.QueryIntegerProperty<DeviceInfoModel>(_entities[1].properties[0]);

  /// See [DeviceInfoModel.deviceModel].
  static final deviceModel =
      obx.QueryStringProperty<DeviceInfoModel>(_entities[1].properties[1]);

  /// See [DeviceInfoModel.osVersion].
  static final osVersion =
      obx.QueryStringProperty<DeviceInfoModel>(_entities[1].properties[2]);

  /// See [DeviceInfoModel.screenResolution].
  static final screenResolution =
      obx.QueryStringProperty<DeviceInfoModel>(_entities[1].properties[3]);

  /// See [DeviceInfoModel.deviceUniqueID].
  static final deviceUniqueID =
      obx.QueryStringProperty<DeviceInfoModel>(_entities[1].properties[4]);

  /// See [DeviceInfoModel.batteryStatus].
  static final batteryStatus =
      obx.QueryRelationToOne<DeviceInfoModel, BatteryStatusModel>(
          _entities[1].properties[5]);

  /// See [DeviceInfoModel.networkInformation].
  static final networkInformation =
      obx.QueryStringProperty<DeviceInfoModel>(_entities[1].properties[6]);

  /// See [DeviceInfoModel.latitude].
  static final latitude =
      obx.QueryDoubleProperty<DeviceInfoModel>(_entities[1].properties[7]);

  /// See [DeviceInfoModel.longitude].
  static final longitude =
      obx.QueryDoubleProperty<DeviceInfoModel>(_entities[1].properties[8]);

  /// See [DeviceInfoModel.accuracy].
  static final accuracy =
      obx.QueryDoubleProperty<DeviceInfoModel>(_entities[1].properties[9]);

  /// See [DeviceInfoModel.altitude].
  static final altitude =
      obx.QueryDoubleProperty<DeviceInfoModel>(_entities[1].properties[10]);

  /// See [DeviceInfoModel.heading].
  static final heading =
      obx.QueryDoubleProperty<DeviceInfoModel>(_entities[1].properties[11]);

  /// See [DeviceInfoModel.speed].
  static final speed =
      obx.QueryDoubleProperty<DeviceInfoModel>(_entities[1].properties[12]);

  /// See [DeviceInfoModel.speedAccuracy].
  static final speedAccuracy =
      obx.QueryDoubleProperty<DeviceInfoModel>(_entities[1].properties[13]);

  /// See [DeviceInfoModel.timestamp].
  static final timestamp =
      obx.QueryDateProperty<DeviceInfoModel>(_entities[1].properties[14]);

  /// See [DeviceInfoModel.nearbyBluetoothDevices].
  static final nearbyBluetoothDevices =
      obx.QueryStringVectorProperty<DeviceInfoModel>(
          _entities[1].properties[15]);
}
